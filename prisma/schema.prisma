generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id                                      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date_time                               DateTime @db.Timestamp(6)
  user_id                                 String?  @db.Uuid
  medical_staff_id                        String?  @db.Uuid
  created_at                              DateTime @default(now()) @db.Timestamp(6)
  updated_at                              DateTime @default(now()) @db.Timestamp(6)
  user_appointment_medical_staff_idTouser user?    @relation("appointment_medical_staff_idTouser", fields: [medical_staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_appointment_user_idTouser          user?    @relation("appointment_user_idTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model insurance_plan {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String        @db.VarChar(255)
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description    String?          @db.VarChar(255)
  name           String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  user_id        String           @db.Uuid
  tenant_id      String           @db.VarChar(255)
  insurance_plan insurance_plan[]
  user           user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model patient {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @db.VarChar(255)
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                          String         @unique @db.VarChar(255)
  firstName                                      String?        @db.VarChar(255)
  lastName                                       String?        @db.VarChar(255)
  roq_user_id                                    String         @db.VarChar(255)
  tenant_id                                      String         @db.VarChar(255)
  created_at                                     DateTime       @default(now()) @db.Timestamp(6)
  updated_at                                     DateTime       @default(now()) @db.Timestamp(6)
  appointment_appointment_medical_staff_idTouser appointment[]  @relation("appointment_medical_staff_idTouser")
  appointment_appointment_user_idTouser          appointment[]  @relation("appointment_user_idTouser")
  organization                                   organization[]
  patient                                        patient[]
}
